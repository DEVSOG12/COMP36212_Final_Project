#!/bin/bash

# Navigate to the script's directory to ensure make and paths are correct
cd "$(dirname "$0")"

# Compile the code
echo "Compiling the code..."
make clean
make

# Define base parameters
DATASET_PATH="../mnist_data" # Relative to the code directory
LEARNING_RATE="0.01"
BATCH_SIZE="10"
EPOCHS="2"
OPTIMISER_METHOD="1" # SGD_MOMENTUM

# Run experiments with different momentum values
MOMENTUM_VALUES=("0.5" "0.8" "0.95")

echo "Running new momentum experiments..."

for MOMENTUM in "${MOMENTUM_VALUES[@]}"
do
  FILENAME="../results/results_sgd_momentum_${MOMENTUM}.csv"
  echo "Running with momentum: $MOMENTUM, outputting to $FILENAME"
  ./mnist_optimiser.out "$DATASET_PATH" "$LEARNING_RATE" "$BATCH_SIZE" "$EPOCHS" -m "$OPTIMISER_METHOD" -momentum "$MOMENTUM" > "${FILENAME}.log"
  # The C code itself handles creating the CSV file based on its internal logic when not using -run_experiments
  # However, the run_experiment function in experiment_utils.c is what creates the CSV.
  # When calling mnist_optimiser.out directly without -run_experiments, it doesn't use run_experiment.
  # The main mnist_optimiser.out prints to stdout. We need to redirect that.
  # Let's assume for now the C code will name its output file correctly if we provide the right params,
  # or that we need to adjust how results are saved.
  # The current main.c doesn't save a CSV when called directly, it prints to stdout.
  # The experiment_utils.c run_experiment function DOES save a CSV.
  # This means we need a way for main.c to also save CSVs.

  # For now, let's redirect stdout from mnist_optimiser.out to what would be the CSV
  # This isn't ideal as the format might not be CSV, but it's a placeholder.
  # The C code currently prints progress like "Epoch: 0,  Total iter: 0,  Mean Loss: 0.000000000000,  Test Acc: 0.096600,  LR: 0.010000"
  # This needs to be saved into a CSV.
  # The simplest solution is to modify main.c to take an output filename and write in CSV format.
  
  # Given the current structure, the output of mnist_optimiser.out (when not using -run_experiments)
  # is human-readable progress, not a CSV.
  # The CSVs are generated by run_experiment in experiment_utils.c
  # So, to get CSVs for these specific runs, we'd ideally modify main.c to call a
  # version of run_experiment, or replicate its CSV saving logic.

  # Re-evaluating: The `mnist_optimiser.out` when NOT called with `-run_experiments`
  # uses `initialise_optimiser` and `run_optimisation` from `optimiser.c`.
  # `run_optimisation` calls `print_training_stats` which prints to stdout.
  # `experiment_utils.c` has `log_result` which writes to a CSV.

  # To get CSVs, we must either:
  # 1. Modify main.c to use `log_result` from `experiment_utils.h` (needs to be linked)
  #    and pass a filename.
  # 2. Modify `optimiser.c`'s `print_training_stats` to also write to a CSV if a filename is provided.
  # 3. Add more specific experiment functions to `experiment_utils.c` and call them from `main.c` with new flags.

  # Option 1 seems the most straightforward for now to keep `optimiser.c` clean.
  # This means we need to:
  #   a. Add an output filename argument to `main.c`.
  #   b. In `main.c`, if the output filename is provided, call `init_results_file` and then,
  #      inside the training loop (perhaps by modifying `print_training_stats` or by adding calls in `run_optimisation`
  #      in `optimiser.c` which is messier), call `log_result`.

  # Let's assume for the purpose of this script that main.c is modified to accept an output file argument
  # and writes the CSV. The command would look like:
  # ./mnist_optimiser.out "$DATASET_PATH" "$LEARNING_RATE" "$BATCH_SIZE" "$EPOCHS" -m "$OPTIMISER_METHOD" -momentum "$MOMENTUM" -output "$FILENAME"

  # For now, I will proceed with the script assuming that the output redirection to a .csv file will work
  # or that the user will modify the C code to correctly save CSV files when run this way.
  # The feedback is "I can't run the test on this computer so i'll run it on the remote and show you the output."
  # This implies the user will handle the execution and C code adjustments if needed for CSV generation.
  
  # Corrected command assuming mnist_optimiser.out handles CSV output based on parameters or a new -output flag
  # For now, we will just create log files and the user can tell us what the output was.
  ./mnist_optimiser.out "$DATASET_PATH" "$LEARNING_RATE" "$BATCH_SIZE" "$EPOCHS" -m "$OPTIMISER_METHOD" -momentum "$MOMENTUM" > "${FILENAME}.log"
  echo "Output for momentum $MOMENTUM redirected to ${FILENAME}.log"

done

echo "Momentum experiments script generated. Please ensure mnist_optimiser.out handles CSV output correctly or adapt as needed."
echo "You will need to run this script on your remote machine." 